<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NContext.Persistence.EntityFramework</name>
    </assembly>
    <members>
        <member name="P:NContext.Persistence.EntityFramework.UnitOfWorkController.AmbientUnitOfWork">
            <summary>
            Gets the ambient <see cref="T:NContext.Persistence.EntityFramework.IUnitOfWork"/>.
            </summary>
            <value>The ambient unit of work.</value>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Persistence.EntityFramework.PersistenceFactory">
            <summary>
            Provides creation for all persistence-related operations including UnitOfWork and Repositories.
            </summary>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.PersistenceFactory.CreateUnitOfWork(System.Transactions.TransactionScopeOption)">
            <summary>
            Creates a new <see cref="T:NContext.Persistence.EntityFramework.EfUnitOfWork"/> instance unless one already exists in an ambient scope.
            </summary>
            <param name="transactionScopeOption">The transaction scope option.</param>
            <returns>Instance of <see cref="T:NContext.Persistence.EntityFramework.EfUnitOfWork"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.PersistenceFactory.CreateRepository``2">
            <summary>
            Creates an <see cref="T:NContext.Persistence.EntityFramework.EfGenericRepository`1"/> instance using the specified context.
            </summary>
            <typeparam name="TEntity">The type of entity to create.</typeparam>
            <typeparam name="TDbContext">The type of the db context.</typeparam>
            <returns>Instance of <see cref="T:NContext.Persistence.EntityFramework.EfGenericRepository`1"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.PersistenceFactory.GetContext``1">
            <summary>
            Gets or creates the context associated with the specified enumeration.
            </summary>
            <returns>Instance of <see cref="T:System.Data.Entity.DbContext"/>. If the context does not exist in 
            the <see cref="T:NContext.Persistence.EntityFramework.IContextContainer"/>, than one is created.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Persistence.EntityFramework.IUnitOfWork">
            <summary>
            Defines an interface contract for the UnitOfWork pattern.
            </summary>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.IUnitOfWork.Commit">
            <summary>
            Commits the changes in each context to the database.
            </summary>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.IUnitOfWork.Rollback">
            <summary>
            Rolls back each context within the unit of work.
            </summary>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.IUnitOfWork.Validate">
            <summary>
            Validates the contexts.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.IUnitOfWork.ContextContainer">
            <summary>
            Gets the context container.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Persistence.EntityFramework.IContextContainer">
            <summary>
            Defines a contract which aides in management of a distinct collection of <see cref="T:System.Data.Entity.DbContext"/>s 
            based on type. It is responsible for ensuring that only one instance of a given context 
            exists at any given point, per thread. This is done through Unity LifetimeManagers.
            </summary>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.IContextContainer.GetContext``1">
            <summary>
            Gets or creates the <typeparamref name="TContext"/> context.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <returns>Instance of <typeparamref name="TContext"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.IContextContainer.Contexts">
            <summary>
            Gets all contexts.
            </summary>
        </member>
        <member name="T:NContext.Persistence.EntityFramework.ServiceResponse`1">
            <summary>
            Defines a service response implementation of <see cref="T:NContext.Application.ResponseTransferObjectBase`1"/>.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.ServiceResponse`1.#ctor(NContext.Application.ErrorHandling.ErrorBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Persistence.EntityFramework.ServiceResponse`1"/> class.
            </summary>
            <param name="error">The error.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.ServiceResponse`1.#ctor(System.Collections.Generic.IEnumerable{NContext.Application.ErrorHandling.ErrorBase})">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Persistence.EntityFramework.ServiceResponse`1"/> class.
            </summary>
            <param name="errors">The errors.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.ServiceResponse`1.#ctor(System.Data.Entity.Validation.DbEntityValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Persistence.EntityFramework.ServiceResponse`1"/> class.
            </summary>
            <param name="validationResult">The validation result.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.ServiceResponse`1.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Persistence.EntityFramework.ServiceResponse`1"/> class.
            </summary>
            <param name="validationResults">The validation results.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.ServiceResponse`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Persistence.EntityFramework.ServiceResponse`1"/> class.
            </summary>
            <param name="data">The data.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.ServiceResponse`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Persistence.EntityFramework.ServiceResponse`1"/> class.
            </summary>
            <param name="data">The data.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.ServiceResponse`1.Bind``1(System.Func{System.Collections.Generic.IEnumerable{`0},NContext.Application.ResponseTransferObjectBase{``0}})">
            <summary>
            Binds the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> into the function which returns the specified <see cref="T:NContext.Persistence.EntityFramework.ServiceResponse`1"/>.
            </summary>
            <typeparam name="T2">The type of the next <see cref="!:T"/> to return.</typeparam>
            <param name="func">The func.</param>
            <returns>Instance of <see cref="T:NContext.Persistence.EntityFramework.ServiceResponse`1"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.ServiceResponse`1.Either``1(System.Func{System.Collections.Generic.IEnumerable{`0},NContext.Application.ResponseTransferObjectBase{``0}},System.Func{System.Collections.Generic.IEnumerable{NContext.Application.ErrorHandling.Error},NContext.Application.ResponseTransferObjectBase{``0}})">
            <summary>
            A combination of <see cref="M:NContext.Persistence.EntityFramework.ServiceResponse`1.Bind``1(System.Func{System.Collections.Generic.IEnumerable{`0},NContext.Application.ResponseTransferObjectBase{``0}})"/> and <see cref="M:NContext.Application.ResponseTransferObjectBase`1.Catch(System.Action{System.Collections.Generic.IEnumerable{NContext.Application.ErrorHandling.Error}})"/>. 
            It will invoke data function if there is any data, or errors function if there any errors exist.
            </summary>
            <typeparam name="T2">The type of the next data transfer object to return.</typeparam>
            <param name="data">The function to call if there is data and there are no errors.</param>
            <param name="errors">The function to call if there are any errors.</param>
            <returns>Instance of <see cref="T:NContext.Application.ResponseTransferObjectBase`1"/>.</returns>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.ServiceResponse`1.Empty">
            <summary>
            Gets an empty <see cref="T:NContext.Persistence.EntityFramework.ServiceResponse`1"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Persistence.EntityFramework.ContextContainer">
            <summary>
            Defines an implementation of IContextContainer which is responsible for ensuring that only one instance 
            of a given <see cref="T:System.Data.Entity.DbContext"/> exists within a <see cref="T:NContext.Persistence.EntityFramework.IUnitOfWork"/>, per thread.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.ContextContainer.GetContext``1">
            <summary>
            Gets or creates the <typeparamref name="TContext"/> context.
            </summary>
            <typeparam name="TContext">The type of the context.</typeparam>
            <returns>Instance of <typeparamref name="TContext"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.ContextContainer.Contexts">
            <summary>
            Gets all contexts.
            </summary>
        </member>
        <member name="T:NContext.Persistence.EntityFramework.GenericRepositoryBase`1">
            <summary>
            Defines a generic repository base abstraction.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Add(`0)">
            <summary>
            Adds a transient instance of <typeparamref cref="!:TEntity"/> to the unit of work
            to be persisted and inserted by the repository.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be
            inserted into the database.</param>
            <remarks>Implementors of this method must handle the PersistAdd scenario.</remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Remove(`0)">
            <summary>
            Adds a transient instance of <typeparamref cref="!:TEntity"/> to the unit of work
            to be persisted and deleted by the repository.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be
            deleted from the database.</param>
            <remarks>Implementors of this method must handle the PersistDelete scneario.</remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Attach(`0)">
            <summary>
            Attaches a detached entity.
            </summary>
            <param name="entity">The entity instance to attach to the repository.</param>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Refresh(`0)">
            <summary>
            Refreshes a entity instance.
            </summary>
            <param name="entity">The entity to refresh.</param>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.GetPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Get all elements of type <see cref="!:TEntity"/> 
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="pageIndex">Page index</param>
            <param name="pageCount">Number of elements in each page</param>
            <param name="orderByExpression">Order by expression for this query</param>
            <param name="ascending">Specify if order is ascending</param>
            <returns>List of selected elements</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.SqlQuery(System.String,System.Object[])">
            <summary>
            Queries the context using the database providers native SQL query language and returns
            a strongly-typed collection of <typeparamref name="TEntity"/>.
            </summary>
            <param name="sql">The SQL query.</param>
            <param name="parameters">The parameters.</param>
            <returns>IQueryable&lt;TEntity&gt; instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Include(System.Action{NContext.Persistence.EagerLoadingStrategy{`0}})">
            <summary>
            Eagerly fetch associations on the entity.
            </summary>
            <param name="strategyActions">An <see cref="T:System.Action`1"/> delegate
            that specifies the eager fetching paths.</param>
            <returns>The <see cref="T:NContext.Persistence.EntityFramework.GenericRepositoryBase`1"/> instance.</returns>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Validate(`0)">
            <summary>
            Validates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.ApplyEagerLoadingStrategy(System.Linq.Expressions.Expression[])">
            <summary>
            When overriden by inheriting classes, applies the fetching strategies on the repository.
            </summary>
            <param name="paths">An array of <see cref="P:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Expression"/> containing the paths to
            eagerly fetch.</param>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before 
            the <see cref="T:NContext.Persistence.EntityFramework.GenericRepositoryBase`1"/> is reclaimed by garbage collection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Context">
            <summary>
            Gets the context associated with the repository instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.ElementType">
            <summary>
            Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable"/> is executed.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.
            </returns>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Expression">
            <summary>
            Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable"/>.
            </summary>
            <returns>
            The <see cref="P:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Expression"/> that is associated with this instance of <see cref="T:System.Linq.IQueryable"/>.
            </returns>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Provider">
            <summary>
            Gets the query provider that is associated with this data source.
            </summary>
            <returns>
            The <see cref="T:System.Linq.IQueryProvider"/> that is associated with this data source.
            </returns>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.RepositoryQuery">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryable`1"/> used by the <see cref="T:NContext.Persistence.EntityFramework.GenericRepositoryBase`1"/> 
            to execute Linq queries.
            </summary>
            <value>A <see cref="T:System.Linq.IQueryable`1"/> instance.</value>
            <remarks>
            Inheritors of this base class should return a valid non-null <see cref="T:System.Linq.IQueryable`1"/> instance.
            </remarks>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Persistence.EntityFramework.EfGenericRepository`1">
            <summary>
            Defines a generic implementation of the repository pattern for database communication.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfGenericRepository`1.#ctor(System.Data.Entity.DbContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Persistence.EntityFramework.EfGenericRepository`1"/> class.
            </summary>
            <param name="context">The context.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfGenericRepository`1.Add(`0)">
            <summary>
            Adds a transient instance of <typeparamref cref="!:TEntity"/> to the unit of work
            to be persisted and inserted by the repository.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be
            inserted into the database.</param>
            <remarks>Implementors of this method must handle the PersistAdd scenario.</remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfGenericRepository`1.Remove(`0)">
            <summary>
            Adds a transient instance of <typeparamref cref="!:TEntity"/> to the unit of work
            to be persisted and deleted by the repository.
            </summary>
            <param name="entity">An instance of <typeparamref name="TEntity"/> that should be
            deleted from the database.</param>
            <remarks>Implementors of this method must handle the PersistDelete scneario.</remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfGenericRepository`1.Attach(`0)">
            <summary>
            Attaches a detached entity.
            </summary>
            <param name="entity">The entity instance to attach back to the repository.</param>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfGenericRepository`1.Refresh(`0)">
            <summary>
            Refreshes a entity instance.
            </summary>
            <param name="entity">The entity to refresh.</param>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfGenericRepository`1.GetPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Gets the paged.
            </summary>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageCount">The page count.</param>
            <param name="orderByExpression">The order by expression.</param>
            <param name="ascending">if set to <c>true</c> [ascending].</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfGenericRepository`1.SqlQuery(System.String,System.Object[])">
            <summary>
            Queries the <see cref="T:System.Data.Entity.DbContext"/> via SQL, using the specified parameters.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfGenericRepository`1.ApplyEagerLoadingStrategy(System.Linq.Expressions.Expression[])">
            <summary>
            When overriden by inheriting classes, applies the eager loading strategies on the repository.
            </summary>
            <param name="paths">An array of <see cref="P:NContext.Persistence.EntityFramework.GenericRepositoryBase`1.Expression"/> containing the paths to
            eagerly load.</param>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.EfGenericRepository`1.RepositoryQuery">
            <summary>
            Gets the <see cref="T:System.Linq.IQueryable`1"/> used by the <see cref="T:NContext.Persistence.EntityFramework.GenericRepositoryBase`1"/> 
            to execute Linq queries.
            </summary>
            <value>A <see cref="T:System.Linq.IQueryable`1"/> instance.</value>
            <remarks>
            Inheritors of this base class should return a valid non-null <see cref="T:System.Linq.IQueryable`1"/> instance.
            </remarks>
        </member>
        <member name="T:NContext.Persistence.EntityFramework.EfUnitOfWork">
            <summary>
            Defines an Entity Framework 4 implementation of IUnitOfWork pattern.
            </summary>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfUnitOfWork.#ctor(NContext.Persistence.EntityFramework.IContextContainer,System.Transactions.TransactionScopeOption)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Persistence.EntityFramework.EfUnitOfWork"/> class.
            </summary>
            <param name="contextContianer">The context contianer.</param>
            <param name="transactionScopeOption">The transaction scope option.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfUnitOfWork.Commit">
            <summary>
            Commits the changes in the context to the database.
            </summary>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfUnitOfWork.Rollback">
            <summary>
            Rolls back each context within the unit of work.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfUnitOfWork.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:NContext.Persistence.EntityFramework.EfUnitOfWork"/> is reclaimed by garbage collection.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfUnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NContext.Persistence.EntityFramework.EfUnitOfWork.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:NContext.Persistence.EntityFramework.EfUnitOfWork.ContextContainer">
            <summary>
            Gets the context container.
            </summary>
            <remarks></remarks>
        </member>
    </members>
</doc>
