<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NContext.Application</name>
    </assembly>
    <members>
        <member name="T:NContext.Application.Configuration.SecureDirectoryCatalog">
            <summary>
            Defines a MEF catalog which prevents dll hijacking.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Configuration.SecureDirectoryCatalog.Parts">
            <summary>
            Gets the part definitions that are contained in the catalog.
            </summary>
            <returns>
            The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> object has been disposed of.</exception>
        </member>
        <member name="T:NContext.Application.Configuration.IRunWhenApplicationConfigurationIsComplete">
            <summary>
            Defines a role-interface which allows implementors to run 
            when <see cref="M:NContext.Application.Configuration.IApplicationConfiguration.Setup"/> has completed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.IRunWhenApplicationConfigurationIsComplete.Run(NContext.Application.Configuration.IApplicationConfiguration)">
            <summary>
            Runs when the <see cref="M:NContext.Application.Configuration.IApplicationConfiguration.Setup"/> has completed.
            </summary>
            <param name="applicationConfiguration">The application configuration.</param>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Configuration.IRunWhenApplicationConfigurationIsComplete.Priority">
            <summary>
            Gets the priority in which each implementation will run. Implementations will be run 
            in ascending order based on priority, so a lower priority value will execute first.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Configuration.ApplicationConfigurationBuilder">
            <summary>
            Defines a fluent interface builder for application configuration.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationConfigurationBuilder.op_Implicit(NContext.Application.Configuration.ApplicationConfigurationBuilder)~NContext.Application.Configuration.ApplicationConfiguration">
            <summary>
            Performs an implicit conversion from <see cref="T:NContext.Application.Configuration.ApplicationConfigurationBuilder"/> 
            to <see cref="T:NContext.Application.Configuration.ApplicationConfiguration"/>.
            </summary>
            <param name="applicationConfigurationBuilder">The application configuration builder.</param>
            <returns>The result of the conversion.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationConfigurationBuilder.RegisterComponent``1">
            <summary>
            Registers the component with the <see cref="T:NContext.Application.Configuration.ApplicationConfigurationBuilder"/> components collection.
            </summary>
            <typeparam name="TApplicationComponent">The type of the application component.</typeparam>
            <returns>Instance of <see cref="T:NContext.Application.Configuration.ApplicationComponentConfigurationBuilder"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationConfigurationBuilder.RegisterComponent``1(System.Func{``0})">
            <summary>
            Registers the component with the <see cref="T:NContext.Application.Configuration.IApplicationConfiguration"/> instance.
            </summary>
            <typeparam name="TApplicationComponent">The type of the application component.</typeparam>
            <param name="componentFactory">The component factory.</param>
            <returns>Current <see cref="T:NContext.Application.Configuration.IApplicationConfiguration"/> instance.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Configuration.ApplicationConfigurationBuilder.ApplicationConfiguration">
            <summary>
            Gets the application configuration.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.ErrorHandling.ErrorBase">
            <summary>
            Defines an abstraction for localized application errors.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.ErrorHandling.ErrorBase.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.ErrorHandling.ErrorBase"/> class.
            </summary>
            <param name="localizationKey">The localization key.</param>
            <param name="errorMessageParameters">The error message parameters.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.ErrorHandling.ErrorBase.#ctor(System.String,System.Net.HttpStatusCode,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.ErrorHandling.ErrorBase"/> class.
            </summary>
            <param name="localizationKey">The localization key.</param>
            <param name="httpStatusCode">The HTTP status code.</param>
            <param name="errorMessageParameters">The error message parameters.</param>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.ErrorHandling.ErrorBase.ErrorType">
            <summary>
            Gets the error name.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.ErrorHandling.ErrorBase.Message">
            <summary>
            Gets the localized error message.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.ErrorHandling.ErrorBase.HttpStatusCode">
            <summary>
            Gets the status code.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Caching.CacheConfiguration">
            <summary>
            Defines a configuration class to build the application's <see cref="T:NContext.Application.Caching.CacheManager"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Configuration.ApplicationComponentConfigurationBase">
            <summary>
            Defines an abstraction for creating application component configurations which 
            can in turn be used with an <see cref="T:NContext.Application.Configuration.ApplicationConfigurationBuilder"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationComponentConfigurationBase.#ctor(NContext.Application.Configuration.ApplicationConfigurationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.Configuration.ApplicationComponentConfigurationBase"/> class.
            </summary>
            <param name="applicationConfigurationBuilder">The application configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationComponentConfigurationBase.op_Implicit(NContext.Application.Configuration.ApplicationComponentConfigurationBase)~NContext.Application.Configuration.ApplicationConfiguration">
            <summary>
            Performs an implicit conversion from <see cref="T:NContext.Application.Configuration.ApplicationComponentConfigurationBase"/> 
            to <see cref="T:NContext.Application.Configuration.ApplicationConfiguration"/>.
            </summary>
            <param name="componentConfiguration">The configuration builder section.</param>
            <returns>The result of the conversion.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationComponentConfigurationBase.RegisterComponent``1">
            <summary>
            Registers the component with the <see cref="T:NContext.Application.Configuration.IApplicationConfiguration"/>.
            </summary>
            <typeparam name="TApplicationComponent">The type of the application component.</typeparam>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationComponentConfigurationBase.RegisterComponent``1(System.Func{``0})">
            <summary>
            Registers the component with the <see cref="T:NContext.Application.Configuration.IApplicationConfiguration"/>.
            </summary>
            <typeparam name="TApplicationComponent">The type of the application component.</typeparam>
            <param name="componentFactory">The component factory.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationComponentConfigurationBase.Setup">
            <summary>
            Applies the component configuration with the <see cref="T:NContext.Application.Configuration.IApplicationConfiguration"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Configuration.ApplicationComponentConfigurationBase.Builder">
            <summary>
            Gets the builder instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheConfiguration.#ctor(NContext.Application.Configuration.ApplicationConfigurationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.Caching.CacheConfiguration"/> class.
            </summary>
            <param name="applicationConfigurationBuilder">The application configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheConfiguration.SetProvider``1(System.Func{``0})">
            <summary>
            Sets the cache provider.
            </summary>
            <typeparam name="TCacheProvider">The type of the cache provider.</typeparam>
            <param name="cacheProvider">The cache provider.</param>
            <returns>This <see cref="T:NContext.Application.Caching.CacheConfiguration"/> instance.</returns>
        </member>
        <member name="M:NContext.Application.Caching.CacheConfiguration.SetRegionName(System.String)">
            <summary>
            Sets the name of the default region to use.
            </summary>
            <param name="cacheRegionName">Name of the cache region.</param>
            <returns>This <see cref="T:NContext.Application.Caching.CacheConfiguration"/> instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheConfiguration.SetDefaults(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Sets the cache configuration settings for cache item expiration.
            </summary>
            <param name="absoluteExpiration">The absolute expiration.</param>
            <param name="slidingExpiration">The sliding expiration.</param>
            <returns>This <see cref="T:NContext.Application.Caching.CacheConfiguration"/> instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheConfiguration.Setup">
            <summary>
            Sets the application's cache manager using 
            the configuration created from this instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Caching.CacheConfiguration.Provider">
            <summary>
            Gets the provider.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Caching.CacheConfiguration.RegionName">
            <summary>
            Gets the name of the region.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Caching.CacheConfiguration.AbsoluteExpiration">
            <summary>
            Gets the absolute expiration.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Caching.CacheConfiguration.SlidingExpiration">
            <summary>
            Gets the sliding expiration.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Configuration.SafeDirectoryCatalog">
            <summary>
            Defines a MEF catalog which prevents exceptions from being thrown when an assembly cannot be added.
            </summary>
        </member>
        <member name="M:NContext.Application.Configuration.SafeDirectoryCatalog.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.Configuration.SafeDirectoryCatalog"/> class.
            </summary>
            <param name="directory">The directory.</param>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Configuration.SafeDirectoryCatalog.Parts">
            <summary>
            Gets the part definitions that are contained in the catalog.
            </summary>
            <returns>The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartDefinition"/> contained in the <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/>.</returns>
              
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog"/> object has been disposed of.</exception>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Configuration.IRunWhenComponentConfigurationIsComplete">
            <summary>
            Defines a role-interface which allows implementors to run 
            when <see cref="M:NContext.Application.Configuration.IApplicationComponent.Configure(NContext.Application.Configuration.IApplicationConfiguration)"/> has completed.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.IRunWhenComponentConfigurationIsComplete.Run(NContext.Application.Configuration.IApplicationComponent)">
            <summary>
            Runs when a <see cref="M:NContext.Application.Configuration.IApplicationComponent.Configure(NContext.Application.Configuration.IApplicationConfiguration)"/> has completed.
            </summary>
            <param name="applicationComponent">The application component.</param>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Configuration.ApplicationComponentConfigurationBuilder">
            <summary>
            Defines a fluent-interface builder for application components.
            </summary>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationComponentConfigurationBuilder.#ctor(NContext.Application.Configuration.ApplicationConfigurationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.Configuration.ApplicationComponentConfigurationBuilder"/> class.
            </summary>
            <param name="applicationConfigurationBuilder">The application configuration builder.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationComponentConfigurationBuilder.op_Implicit(NContext.Application.Configuration.ApplicationComponentConfigurationBuilder)~NContext.Application.Configuration.ApplicationConfiguration">
            <summary>
            Performs an implicit conversion from <see cref="T:NContext.Application.Configuration.ApplicationComponentConfigurationBase"/>
            to <see cref="T:NContext.Application.Configuration.ApplicationConfiguration"/>.
            </summary>
            <param name="componentConfigurationBuilder">The component configuration builder.</param>
            <returns>The result of the conversion.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationComponentConfigurationBuilder.With``1">
            <summary>
            Configure's the <see cref="T:NContext.Application.Configuration.IApplicationComponent"/> with the specified <typeparamref name="TComponentConfiguration"/> instance.
            </summary>
            <typeparam name="TComponentConfiguration">The type of the component configuration.</typeparam>
            <returns><typeparamref name="TComponentConfiguration"/> instance to configure.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Extensions.NameValueCollectionExtensions">
            <summary>
            Defines extension methods for <see cref="T:System.Collections.Specialized.NameValueCollection"/>s.
            </summary>
        </member>
        <member name="M:NContext.Application.Extensions.NameValueCollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Converts the <see cref="T:System.Collections.Specialized.NameValueCollection"/> to a <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <param name="source">The source.</param>
            <returns><see cref="T:System.Collections.Generic.Dictionary`2"/> which can be enumerated on.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Utilities.AttributeUtility">
            <summary>
            Defines helper methods for using attributes and reflection.
            </summary>
        </member>
        <member name="M:NContext.Application.Utilities.AttributeUtility.GetDescriptionAttributeValueFromField(System.Object)">
            <summary>
            Gets the description attribute value from a field.
            </summary>
            <param name="field">The field.</param>
            <returns>The value of the <see cref="T:System.ComponentModel.DescriptionAttribute"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Utilities.AttributeUtility.GetEnumValueFromDescriptionAttributeValue``1(System.String)">
            <summary>
            Gets the enum value from the specified description attribute value.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="description">The description.</param>
            <returns>The <typeparamref name="TEnum"/> value.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Security.ISecurityManager">
            <summary>
            Defines interface contract which encapsulates logic for application security-related operations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Configuration.IApplicationComponent">
            <summary>
            Defines a contract for all application-level components.
            </summary>
        </member>
        <member name="M:NContext.Application.Configuration.IApplicationComponent.Configure(NContext.Application.Configuration.IApplicationConfiguration)">
            <summary>
            Configures the component instance. This method should set <see cref="P:NContext.Application.Configuration.IApplicationComponent.IsConfigured"/>.
            </summary>
            <param name="applicationConfiguration">The application configuration.</param>
            <remarks>
            </remarks>
        </member>
        <member name="P:NContext.Application.Configuration.IApplicationComponent.IsConfigured">
            <summary>
            Gets a value indicating whether this instance is configured.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.ISecurityManager.SavePrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Saves the principal to cache using the application's <see cref="T:NContext.Application.Caching.ICacheManager"/>.
            </summary>
            <param name="principal">The principal.</param>
            <returns>A token used to retrieve the <see cref="T:System.Security.Principal.IPrincipal"/> from cache.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.ISecurityManager.SavePrincipal``1(System.Security.Principal.IPrincipal)">
            <summary>
            Saves the principal to cache using the application's <see cref="T:NContext.Application.Caching.ICacheManager"/>.
            </summary>
            <typeparam name="TToken">The type of the token.</typeparam>
            <param name="principal">The principal.</param>
            <returns>A <typeparamref name="TToken"/> token used to retrieve the <see cref="T:System.Security.Principal.IPrincipal"/> from cache.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.ISecurityManager.SavePrincipal(System.Security.Principal.IPrincipal,System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Updates the cached principal associated with the specified <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>, using the application's <see cref="T:NContext.Application.Caching.ICacheManager"/>.
            </summary>
            <param name="principal">The cached <see cref="T:System.Security.Principal.IPrincipal"/> instance.</param>
            <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> to associate with <paramref name="principal"/>.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.ISecurityManager.ExpirePrincipal(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Expires the principal associated with the specified <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
            <param name="token">The token.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.ISecurityManager.GetPrincipal(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Gets the cached <see cref="T:System.Security.Principal.IPrincipal"/> instance associated with the specified <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
            <param name="token">The token.</param>
            <returns>Instance of <see cref="T:System.Security.Principal.IPrincipal"/> if found in cache, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.ISecurityManager.GetPrincipal``1(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Gets the cached <typeparamref name="TPrincipal"/> instance associated with the specified <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
            <typeparam name="TPrincipal">The type of the principal.</typeparam>
            <param name="token">The token.</param>
            <returns>Instance of <typeparamref name="TPrincipal"/> if found in cache, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Configuration.Configure">
            <summary>
            Defines a static class for fluid-interface application configuration.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.Configure.Using``1(``0)">
            <summary>
            Configures the application using the specified <see cref="T:NContext.Application.Configuration.IApplicationConfiguration"/> instance.
            </summary>
            <typeparam name="TApplicationConfiguration">The type of the application configuration.</typeparam>
            <param name="applicationConfiguration">The application configuration instance.</param>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Caching.CacheManager">
            <summary>
            Defines a default <see cref="T:NContext.Application.Caching.ICacheManager"/> implementation.
            </summary>
        </member>
        <member name="T:NContext.Application.Caching.ICacheManager">
            <summary>
            Defines a contract for managing the application's cache provider.
            </summary>
        </member>
        <member name="M:NContext.Application.Caching.ICacheManager.AddOrUpdateItem``1(System.String,``0,System.String)">
            <summary>
            Adds or updates the specified instance to the cache.
            </summary>
            <typeparam name="TObject">The type of the object to cache.</typeparam>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="instance">The object instance.</param>
            <param name="regionName">Name of the region.</param>
            <returns>True, if the instance has successfully been added to the cache, else false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.ICacheManager.AddOrUpdateItem``1(System.String,``0,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Adds or updates the specified instance to the cache.
            </summary>
            <typeparam name="TObject">The type of the object to cache.</typeparam>
            <param name="cacheEntryKey">The cache enty key.</param>
            <param name="instance">The object instance.</param>
            <param name="cacheItemPolicy">The cache item policy.</param>
            <param name="regionName">Name of the region.</param>
            <returns>True, if the instance has successfully been added to the cache, else false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.ICacheManager.Contains(System.String,System.String)">
            <summary>
            Returns true if key refers to item current stored in cache
            </summary>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="regionName">Name of the region.</param>
            <returns>True if item referenced by key is in the cache</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.ICacheManager.Flush(System.String)">
            <summary>
            Removes all items from the cache. If an error occurs during the removal, the cache is left unchanged.
            </summary>
            <param name="regionName">Name of the region.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.ICacheManager.Get``1(System.String,System.String)">
            <summary>
            Gets the cache item associated with the specified key.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="regionName">Name of the region.</param>
            <returns><typeparamref name="TObject"/> instance if found in the cache, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.ICacheManager.Get(System.String,System.String)">
            <summary>
            Gets the cache item associated with the specified key.
            </summary>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="regionName">Name of the region.</param>
            <returns>Object instance if found in the cache, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.ICacheManager.GetCount(System.String)">
            <summary>
            Gets the number of items in cache.
            </summary>
            <param name="regionName">Name of the region.</param>
            <returns>Total amount of items in cache.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.ICacheManager.Remove(System.String,System.String)">
            <summary>
            Removes the cache item associated with the specified cache entry key.
            </summary>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="regionName">Name of the region.</param>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Caching.ICacheManager.Provider">
            <summary>
            Gets the cache provider.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Caching.ICacheManager.Item(System.String,System.String)">
            <summary>
            Returns the item identified by the provided key.
            </summary>
            <param name="cacheEntryKey">The cache entry key to retrieve.</param>
            <param name="regionName">The cache region.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the cache items.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.#ctor(NContext.Application.Caching.CacheConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.Caching.CacheManager"/> class.
            </summary>
            <param name="cacheConfiguration">The caching configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.Configure(NContext.Application.Configuration.IApplicationConfiguration)">
            <summary>
            Configures the component instance.
            </summary>
            <param name="applicationConfiguration">The application configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.AddOrUpdateItem``1(System.String,``0,System.String)">
            <summary>
            Adds or updates the specified instance to the cache.
            </summary>
            <typeparam name="TObject">The type of the object to cache.</typeparam>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="instance">The object instance.</param>
            <param name="regionName">Name of the region.</param>
            <returns>True, if the instance has successfully been added to the cache, else false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.AddOrUpdateItem``1(System.String,``0,System.Runtime.Caching.CacheItemPolicy,System.String)">
            <summary>
            Adds or updates the specified instance to the cache.
            </summary>
            <typeparam name="TObject">The type of the object to cache.</typeparam>
            <param name="cacheEntryKey">The cache enty key.</param>
            <param name="instance">The object instance.</param>
            <param name="cacheItemPolicy">The cache item policy.</param>
            <param name="regionName">Name of the region.</param>
            <returns>True, if the instance has successfully been added to the cache, else false.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.Contains(System.String,System.String)">
            <summary>
            Returns true if key refers to item current stored in cache
            </summary>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="regionName">Name of the region.</param>
            <returns>True if item referenced by key is in the cache</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.Flush(System.String)">
            <summary>
            Removes all items from the cache. If an error occurs during the removal, the cache is left unchanged.
            </summary>
            <param name="regionName">Name of the region.</param>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the CacheItems.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.Get``1(System.String,System.String)">
            <summary>
            Gets the cache item associated with the specified key.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="regionName">Name of the region.</param>
            <returns><typeparamref name="TObject"/> instance if found in the cache, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.Get(System.String,System.String)">
            <summary>
            Gets the cache item associated with the specified key.
            </summary>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="regionName">Name of the region.</param>
            <returns>Object instance if found in the cache, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.GetCount(System.String)">
            <summary>
            Gets the number of items in cache.
            </summary>
            <param name="regionName">Name of the region.</param>
            <returns>Total amount of items in cache.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Caching.CacheManager.Remove(System.String,System.String)">
            <summary>
            Removes the cache item associated with the specified cache entry key.
            </summary>
            <param name="cacheEntryKey">The cache entry key.</param>
            <param name="regionName">Name of the region.</param>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Caching.CacheManager.Provider">
            <summary>
            Gets the cache provider.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Caching.CacheManager.IsConfigured">
            <summary>
            Gets a value indicating whether this instance is configured.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Caching.CacheManager.Item(System.String,System.String)">
            <summary>
            Returns the item identified by the provided key.
            </summary>
            <param name="cacheEntryKey">The cache entry key to retrieve.</param>
            <param name="regionName">The cache region.</param>
            <exception cref="T:System.ArgumentNullException">Provided key is null</exception>
            <exception cref="T:System.ArgumentException">Provided key is an empty string</exception>
            <remarks>The CacheManager can be configured to use different storage mechanisms in which to store the cache items.
            Each of these storage mechanisms can throw exceptions particular to their own implementations.</remarks>
        </member>
        <member name="T:NContext.Application.Extensions.TypeExtensions">
            <summary>
            Defines a static class for providing Type extension methods.
            </summary>
        </member>
        <member name="M:NContext.Application.Extensions.TypeExtensions.Implements``1(System.Type)">
            <summary>
            Evaluates whether the specified type implements the type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The base type or interface type to check against.</typeparam>
            <param name="type">The derived type.</param>
            <returns><c>True</c> if <paramref name="type"/> implements or inherits from type <typeparamref name="T"/>, else <c>false</c>.</returns>
        </member>
        <member name="M:NContext.Application.Extensions.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Determines whether the specified type is anonymous.
            </summary>
            <param name="type">The type.</param>
            <returns><c>true</c> if [is anonymous type] [the specified type]; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Configuration.IApplicationConfiguration">
            <summary>
            Defines an application configuration contract.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.IApplicationConfiguration.GetComponent``1">
            <summary>
            Gets the application component by type registered.
            </summary>
            <typeparam name="TApplicationComponent">The type of the application component.</typeparam>
            <returns>Instance of <typeparamref name="TApplicationComponent"/> if it exists, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.IApplicationConfiguration.RegisterComponent``1(System.Func{NContext.Application.Configuration.IApplicationComponent})">
            <summary>
            Registers an application component.
            </summary>
            <typeparam name="TApplicationComponent">The type of the application component.</typeparam>
            <param name="componentFactory">The component factory.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.IApplicationConfiguration.Setup">
            <summary>
            Creates all application components and configures them.
            </summary>
            <remarks>Should only be called once from application startup.</remarks>
        </member>
        <member name="P:NContext.Application.Configuration.IApplicationConfiguration.IsConfigured">
            <summary>
            Gets a value indicating whether this instance is configured.
            </summary>
            <value>
                <c>true</c> if this instance is configured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NContext.Application.Configuration.IApplicationConfiguration.CompositionContainer">
            <summary>
            Gets the application composition container.
            </summary>
        </member>
        <member name="P:NContext.Application.Configuration.IApplicationConfiguration.Components">
            <summary>
            Gets the application components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Extensions.EnumExtensions">
            <summary>
            Defines a static class for providing enum type extension methods.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.EnumExtensions.ToDescriptionValue(System.Enum)">
            <summary>
            Gets the <see cref="T:System.ComponentModel.DescriptionAttribute"/> value based upon the enum value specified.
            </summary>
            <param name="value">The value.</param>
            <returns>The value of the <see cref="T:System.ComponentModel.DescriptionAttribute"/> if one exists, else <see cref="F:System.String.Empty"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Security.SecurityManager">
            <summary>
            Defines a manager class which implements logic for application security-related operations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityManager.#ctor(NContext.Application.Security.SecurityConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.Security.SecurityManager"/> class.
            </summary>
            <param name="securityConfiguration">The security configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityManager.SavePrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Saves the principal to cache using the application's <see cref="T:NContext.Application.Caching.ICacheManager"/>.
            </summary>
            <param name="principal">The principal.</param>
            <returns>A token used to retrieve the <see cref="T:System.Security.Principal.IPrincipal"/> from cache.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityManager.SavePrincipal``1(System.Security.Principal.IPrincipal)">
            <summary>
            Saves the principal to cache using the application's <see cref="T:NContext.Application.Caching.ICacheManager"/>.
            </summary>
            <typeparam name="TToken">The type of the token.</typeparam>
            <param name="principal">The principal.</param>
            <returns>A <typeparamref name="TToken"/> token used to retrieve the <see cref="T:System.Security.Principal.IPrincipal"/> from cache.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityManager.SavePrincipal(System.Security.Principal.IPrincipal,System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Adds or updates the cached principal associated with the specified <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>, using the application's <see cref="T:NContext.Application.Caching.ICacheManager"/>.
            </summary>
            <param name="principal">The cached <see cref="T:System.Security.Principal.IPrincipal"/> instance.</param>
            <param name="token">The <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> to associate with <paramref name="principal"/>.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityManager.ExpirePrincipal(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Expires the principal associated with the specified <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
            <param name="token">The token.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityManager.GetPrincipal(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Gets the cached <see cref="T:System.Security.Principal.IPrincipal"/> instance associated with the specified <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
            <param name="token">The token.</param>
            <returns>Instance of <see cref="T:System.Security.Principal.IPrincipal"/> if found in cache, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityManager.GetPrincipal``1(System.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Gets the cached <typeparamref name="TPrincipal"/> instance associated with the specified <see cref="T:System.IdentityModel.Tokens.SecurityToken"/>.
            </summary>
            <typeparam name="TPrincipal">The type of the principal.</typeparam>
            <param name="token">The token.</param>
            <returns>Instance of <typeparamref name="TPrincipal"/> if found in cache, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityManager.Configure(NContext.Application.Configuration.IApplicationConfiguration)">
            <summary>
            Configures the component instance.
            </summary>
            <param name="applicationConfiguration">The application configuration.</param>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Security.SecurityManager.IsConfigured">
            <summary>
            Gets a value indicating whether this instance is configured.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Security.Cryptography.ICryptographyManager">
            <summary>
            Defines an interface for application-wide security management.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Security.Cryptography.ICryptographyManager.Provider">
            <summary>
            Gets the provider which handles application cryptographic operations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Configuration.ApplicationConfiguration">
            <summary>
            Defines a class for application configuration.
            </summary>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationConfiguration.GetComponent``1">
            <summary>
            Gets the application component by type registered.
            </summary>
            <typeparam name="TApplicationComponent">The type of the application component.</typeparam>
            <returns>Instance of <typeparamref name="TApplicationComponent"/> if it exists, else null.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationConfiguration.RegisterComponent``1(System.Func{NContext.Application.Configuration.IApplicationComponent})">
            <summary>
            Registers an application component.
            </summary>
            <typeparam name="TApplicationComponent">The type of the application component.</typeparam>
            <param name="componentFactory">The component factory.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationConfiguration.Setup">
            <summary>
            Creates all application components and configures them.
            </summary>
            <remarks>Should only be called once from application startup.</remarks>
        </member>
        <member name="M:NContext.Application.Configuration.ApplicationConfiguration.CreateCompositionContainer">
            <summary>
            Creates the composition container from the executing assembly.
            </summary>
            <returns>
            Application's <see cref="P:NContext.Application.Configuration.ApplicationConfiguration.CompositionContainer"/> instance.
            </returns>
        </member>
        <member name="P:NContext.Application.Configuration.ApplicationConfiguration.IsConfigured">
            <summary>
            Gets a value indicating whether this instance is configured.
            </summary>
            <value><c>true</c> if this instance is configured; otherwise, <c>false</c>.</value>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Configuration.ApplicationConfiguration.CompositionContainer">
            <summary>
            Gets the application composition container.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Configuration.ApplicationConfiguration.Components">
            <summary>
            Gets the application components.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Security.Cryptography.ICryptographyProvider">
            <summary>
            Defines cryptographic operations for hashing and symmetric encryption.
            </summary>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash(System.Byte[],System.Boolean)">
            <summary>
            Creates the hash using the specified <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <returns>The created hash.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash(System.String,System.Boolean)">
            <summary>
            Creates the hash using the specified <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <returns>The created hash.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash``1(System.Byte[],System.Boolean)">
            <summary>
            Creates the hash using the specified <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
            <typeparam name="THashAlgorithm">The type of the hash algorithm.</typeparam>
            <param name="plainText">The plain text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <returns>The created hash.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash``1(System.String,System.Boolean)">
            <summary>
            Creates the hash using the specified <see cref="T:System.Security.Cryptography.HashAlgorithm"/>.
            </summary>
            <typeparam name="THashAlgorithm">The type of the hash algorithm.</typeparam>
            <param name="plainText">The plain text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <returns>The created hash.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Compares the hashes.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash(System.String,System.String,System.Boolean)">
            <summary>
            Compares the hash.
            </summary>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash``1(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Compares the hash.
            </summary>
            <typeparam name="THashAlgorithm">The type of the hash algorithm.</typeparam>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash``1(System.String,System.String,System.Boolean)">
            <summary>
            Compares the hash.
            </summary>
            <typeparam name="THashAlgorithm">The type of the hash algorithm.</typeparam>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates the <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            using the default <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash(System.Byte[],System.Byte[],System.Boolean,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates the <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            using the default <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash``1(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates the <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash``1(System.Byte[],System.Byte[],System.Boolean,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates the <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash(System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates the <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            using the default <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash(System.String,System.String,System.Boolean,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates the <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            using the default <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash``1(System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates the <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHash``1(System.String,System.String,System.Boolean,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Creates the <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHmac(System.String,System.String)">
            <summary>
            Creates a URL-safe Base64-encoded <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CreateHmac``1(System.String,System.String)">
            <summary>
            Creates a URL-safe Base64-encoded <see cref="T:System.Security.Cryptography.HMAC"/> hash with the specified symmetric key 
            and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <returns>The hashed message authentication code. (<see cref="T:System.Security.Cryptography.HMAC"/>)</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash(System.Byte[],System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Compares the hashes using the specified symmetric key and default <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash(System.Byte[],System.Byte[],System.Byte[],System.Boolean,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Compares the hashes using the specified symmetric key and default <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash(System.String,System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Compares the hashes using the specified symmetric key and default <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash(System.String,System.String,System.String,System.Boolean,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Compares the hashes using the specified symmetric key and default <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash``1(System.Byte[],System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Compares the hashes using the specified symmetric key and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash``1(System.Byte[],System.Byte[],System.Byte[],System.Boolean,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Compares the hashes using the specified symmetric key and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash``1(System.String,System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Compares the hashes using the specified symmetric key and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHash``1(System.String,System.String,System.String,System.Boolean,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Compares the hashes using the specified symmetric key and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="hashedText">The hashed text.</param>
            <param name="saltEnabled">if set to <c>true</c> [salt enabled].</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHmac(System.String,System.String,System.String)">
            <summary>
            Compares the hashes using the specified symmetric key and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="base64EncodedHashedText">The base64-encoded and hashed text.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.CompareHmac``1(System.String,System.String,System.String)">
            <summary>
            Compares the hashes using the specified symmetric key and <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm"/>.
            </summary>
            <typeparam name="TKeyedHashAlgorithm">The type of the keyed hash algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="base64EncodedHashedText">The base64-encoded and hashed text.</param>
            <returns><c>true</c> if the hashes match, else <c>false</c></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Encrypt(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Encrypts the specified text using the application's
            default <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The encrypted byte array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Encrypt(System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Encrypts the specified text using the application's
            default <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The encrypted text.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Encrypt(System.IO.FileInfo,System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Encrypts the specified text using the application's
            default <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.
            </summary>
            <param name="protectedKeyFile">The protected key file.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The encrypted byte array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Encrypt(System.IO.FileInfo,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Encrypts the specified text using the application's
            default <see cref="T:System.Security.Cryptography.SymmetricAlgorithm"/>.
            </summary>
            <param name="protectedKeyFile">The protected key file.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The encrypted text.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Encrypt``1(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Encrypts the text with the specified <typeparamref name="TSymmetricAlgorithm"/>.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the symmetric algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The encrypted byte array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Encrypt``1(System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Encrypts the text with the specified <typeparamref name="TSymmetricAlgorithm"/>.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the symmetric algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The encrypted text.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Encrypt``1(System.IO.FileInfo,System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Encrypts the specified text.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the symmetric algorithm.</typeparam>
            <param name="protectedKeyFile">The protected key file.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The encrypted byte array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Encrypt``1(System.IO.FileInfo,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Encrypts the text with the specified <typeparamref name="TSymmetricAlgorithm"/>.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the symmetric algorithm.</typeparam>
            <param name="protectedKeyFile">The protected key file.</param>
            <param name="plainText">The plain text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The encrypted text.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Decrypt(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Decrypts the specified cipher text.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="cipherText">The cipher text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The decrypted byte array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Decrypt(System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Decrypts the specified symmetric key.
            </summary>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="cipherText">The cipher text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The decrypted text.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Decrypt(System.IO.FileInfo,System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Decrypts the specified cipher text.
            </summary>
            <param name="protectedKeyFile">The protected key file.</param>
            <param name="cipherText">The cipher text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The decrypted byte array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Decrypt(System.IO.FileInfo,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Decrypts the specified cipher text.
            </summary>
            <param name="protectedKeyFile">The protected key file.</param>
            <param name="cipherText">The cipher text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The decrypted text.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Decrypt``1(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Decrypts the specified cipher text.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the symmetric algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="cipherText">The cipher text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The decrypted byte array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Decrypt``1(System.String,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Decrypts the specified cipher text.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the symmetric algorithm.</typeparam>
            <param name="symmetricKey">The symmetric key.</param>
            <param name="cipherText">The cipher text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The decrypted text.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Decrypt``1(System.IO.FileInfo,System.Byte[],System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Decrypts the specified cipher text.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the symmetric algorithm.</typeparam>
            <param name="protectedKeyFile">The protected key file.</param>
            <param name="cipherText">The cipher text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The decrypted byte array.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.Cryptography.ICryptographyProvider.Decrypt``1(System.IO.FileInfo,System.String,System.Security.Cryptography.DataProtectionScope)">
            <summary>
            Decrypts the specified cipher text.
            </summary>
            <typeparam name="TSymmetricAlgorithm">The type of the symmetric algorithm.</typeparam>
            <param name="protectedKeyFile">The protected key file.</param>
            <param name="cipherText">The cipher text.</param>
            <param name="dataProtectionScope">The data protection scope.</param>
            <returns>The decrypted text.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Extensions.CompositionContainerExtensions">
            <summary>
            Defines extension methods for <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer"/>.
            </summary>
        </member>
        <member name="M:NContext.Application.Extensions.CompositionContainerExtensions.GetExportTypes(System.ComponentModel.Composition.Hosting.CompositionContainer)">
            <summary>
            Gets all types within the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer"/>'s <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog"/>.
            </summary>
            <param name="container">The container.</param>
            <returns>Enumeration of <see cref="T:System.Type"/>s.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.CompositionContainerExtensions.GetExportTypesThatImplement``1(System.ComponentModel.Composition.Hosting.CompositionContainer)">
            <summary>
            Gets all types within the <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer"/>'s <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog"/> 
            which implement the specified <typeparamref name="TExport"/>.
            </summary>
            <typeparam name="TExport">The type of the export.</typeparam>
            <param name="container">The container.</param>
            <returns>Enumeration of derived / implementing <see cref="T:System.Type"/>s.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Extensions.CollectionExtensions">
            <summary>
            Defines a static class for providing Collection type extension methods.
            </summary>
        </member>
        <member name="M:NContext.Application.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            ForEach extension that enumerates over all items in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> and executes 
            an action.
            </summary>
            <typeparam name="T">The type that this extension is applicable for.</typeparam>
            <param name="collection">The enumerable instance that this extension operates on.</param>
            <param name="action">The action executed for each iten in the enumerable.</param>
        </member>
        <member name="M:NContext.Application.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerator{``0},System.Action{``0})">
            <summary>
            ForEach extension that enumerates over all items in an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and executes 
            an action.
            </summary>
            <typeparam name="T">The type that this extension is applicable for.</typeparam>
            <param name="collection">The enumerator instance that this extension operates on.</param>
            <param name="action">The action executed for each iten in the enumerable.</param>
        </member>
        <member name="M:NContext.Application.Extensions.CollectionExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            For Each extension that enumerates over a enumerable collection and attempts to execute 
            the provided action delegate and it the action throws an exception, continues enumerating.
            </summary>
            <typeparam name="T">The type that this extension is applicable for.</typeparam>
            <param name="collection">The IEnumerable instance that ths extension operates on.</param>
            <param name="action">The action excecuted for each item in the enumerable.</param>
        </member>
        <member name="M:NContext.Application.Extensions.CollectionExtensions.TryForEach``1(System.Collections.Generic.IEnumerator{``0},System.Action{``0})">
            <summary>
            For each extension that enumerates over an enumerator and attempts to execute the provided
            action delegate and if the action throws an exception, continues executing.
            </summary>
            <typeparam name="T">The type that this extension is applicable for.</typeparam>
            <param name="enumerator">The IEnumerator instace</param>
            <param name="action">The action executed for each item in the enumerator.</param>
        </member>
        <member name="T:NContext.Application.Security.SecurityConfiguration">
            <summary>
            Defines a configuration class to build the application's <see cref="T:NContext.Application.Security.SecurityManager"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityConfiguration.#ctor(NContext.Application.Configuration.ApplicationConfigurationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.Security.SecurityConfiguration"/> class.
            </summary>
            <param name="applicationConfigurationBuilder">The application configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityConfiguration.SetDefaults(System.DateTimeOffset,System.TimeSpan,System.TimeSpan)">
            <summary>
            Sets the default cache configuration settings for security token expiration.
            </summary>
            <param name="tokenAbsoluteExpiration">The token absolute expiration.</param>
            <param name="tokenInitialLifespan">The token initial lifespan.</param>
            <param name="tokenSlidingExpiration">The token sliding expiration.</param>
            <returns>This <see cref="T:NContext.Application.Security.SecurityConfiguration"/> instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Security.SecurityConfiguration.Setup">
            <summary>
            Sets the application's security manager using 
            the configuration created from this instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Security.SecurityConfiguration.TokenAbsoluteExpiration">
            <summary>
            Gets the token absolute expiration.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Security.SecurityConfiguration.TokenSlidingExpiration">
            <summary>
            Gets the token sliding expiration.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Security.SecurityConfiguration.TokenInitialLifespan">
            <summary>
            Gets the token initial lifetime.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Extensions.StringExtensions">
            <summary>
            Defines a static class for providing String type extension methods.
            </summary>
        </member>
        <member name="M:NContext.Application.Extensions.StringExtensions.MinimumFormatParametersRequired(System.String)">
            <summary>
            Returns the number of <see cref="M:System.String.Format(System.String,System.Object[])"/> parameters in the specified text.
            </summary>
            <param name="text">The text to scan.</param>
            <returns>Number of required String.Format parameters.</returns>
        </member>
        <member name="M:NContext.Application.Extensions.StringExtensions.ToNameValueCollection(System.String,System.Char,System.Char)">
            <summary>
            Splits a string into a NameValueCollection, where each "namevalue" is separated by
            the "OuterSeparator". The parameter "NameValueSeparator" sets the split between Name and Value.
            Example: 
                        String str = "param1=value1;param2=value2";
                        NameValueCollection nvOut = str.ToNameValueCollection(';', '=');
                        
            The result is a NameValueCollection where:
                        key[0] is "param1" and value[0] is "value1"
                        key[1] is "param2" and value[1] is "value2"
            </summary>
            <param name="str">String to process</param>
            <param name="OuterSeparator">Separator for each "NameValue"</param>
            <param name="NameValueSeparator">Separator for Name/Value splitting</param>
            <returns></returns>
        </member>
        <member name="T:NContext.Application.Security.GuidToken">
            <summary>
            Defines a generic <see cref="T:System.IdentityModel.Tokens.SecurityToken"/> using a <see cref="T:System.Guid"/>
            as token identifier.
            </summary>
        </member>
        <member name="P:NContext.Application.Security.GuidToken.Id">
            <summary>
            Gets a unique identifier of the security token.
            </summary>
            <returns>The unique identifier of the security token.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Security.GuidToken.SecurityKeys">
            <summary>
            Gets the cryptographic keys associated with the security token.
            </summary>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of type <see cref="T:System.IdentityModel.Tokens.SecurityKey"/> that contains the set of keys associated with the security token.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Security.GuidToken.ValidFrom">
            <summary>
            Gets the first instant in time at which this security token is valid.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> that represents the instant in time at which this security token is first valid.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Security.GuidToken.ValidTo">
            <summary>
            Gets the last instant in time at which this security token is valid.
            </summary>
            <returns>A <see cref="T:System.DateTime"/> that represents the last instant in time at which this security token is valid.</returns>
            <remarks></remarks>
        </member>
    </members>
</doc>
