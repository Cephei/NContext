<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NContext.Application.Public</name>
    </assembly>
    <members>
        <member name="T:NContext.Application.Extensions.Nothing`1">
            <summary>
            Defines a Nothing implementation of <see cref="T:NContext.Application.Extensions.IMaybe`1"/>.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NContext.Application.Extensions.IMaybe`1">
            <summary>
            Defines a Maybe monad interface.
            </summary>
            <typeparam name="T">The type to wrap.</typeparam>
            <remarks>
            http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Maybe.html
            </remarks>
        </member>
        <member name="M:NContext.Application.Extensions.IMaybe`1.FromMaybe(`0)">
            <summary>
            Returns the specified default value if the <see cref="T:NContext.Application.Extensions.IMaybe`1"/> is <see cref="T:NContext.Application.Extensions.Nothing`1"/>; 
            otherwise, it returns the value contained in the <see cref="T:NContext.Application.Extensions.IMaybe`1"/>.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>Instance of <typeparamref name="T"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.IMaybe`1.Empty">
            <summary>
            Returns <see cref="T:NContext.Application.Extensions.Nothing`1"/>
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.IMaybe`1.Bind``1(System.Func{`0,NContext.Application.Extensions.IMaybe{``0}})">
            <summary>
            Returns a new <see cref="T:NContext.Application.Extensions.Nothing`1"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="bindFunc">The function used to map.</param>
            <returns>Instance of <see cref="T:NContext.Application.Extensions.IMaybe`1"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Extensions.IMaybe`1.IsJust">
            <summary>
            Gets a value indicating whether the instance is <see cref="T:NContext.Application.Extensions.Just`1"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Extensions.IMaybe`1.IsNothing">
            <summary>
            Gets a value indicating whether the instance is <see cref="T:NContext.Application.Extensions.Nothing`1"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.Nothing`1.FromMaybe(`0)">
            <summary>
            Returns the specified default value if the <see cref="T:NContext.Application.Extensions.IMaybe`1"/> is <see cref="T:NContext.Application.Extensions.Nothing`1"/>; 
            otherwise, it returns the value contained in the <see cref="T:NContext.Application.Extensions.IMaybe`1"/>.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>Instance of <typeparamref name="T"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.Nothing`1.Empty">
            <summary>
            Returns this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NContext.Application.Extensions.Nothing`1.Bind``1(System.Func{`0,NContext.Application.Extensions.IMaybe{``0}})">
            <summary>
            Returns a new <see cref="T:NContext.Application.Extensions.Nothing`1"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="bindFunc">The function used to map.</param>
            <returns>Instance of <see cref="T:NContext.Application.Extensions.IMaybe`1"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Extensions.Nothing`1.IsJust">
            <summary>
            Gets a value indicating whether the instance is <see cref="T:NContext.Application.Extensions.Just`1"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Extensions.Nothing`1.IsNothing">
            <summary>
            Gets a value indicating whether the instance is <see cref="T:NContext.Application.Extensions.Nothing`1"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Application.Extensions.IMaybeExtensions">
            <summary>
            Defines extension methods for <see cref="T:NContext.Application.Extensions.IMaybe`1"/>.
            </summary>
        </member>
        <member name="M:NContext.Application.Extensions.IMaybeExtensions.Select``2(NContext.Application.Extensions.IMaybe{``0},System.Func{``0,NContext.Application.Extensions.IMaybe{``1}})">
            <summary>
            Selects the specified maybe.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TU">The type of the U.</typeparam>
            <param name="maybe">The maybe.</param>
            <param name="func">The func.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.IMaybeExtensions.SelectMany``2(NContext.Application.Extensions.IMaybe{``0},System.Func{``0,NContext.Application.Extensions.IMaybe{``1}},System.Func{``0,``1,NContext.Application.Extensions.IMaybe{``1}})">
            <summary>
            Selects the many.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TU">The type of the U.</typeparam>
            <param name="maybe">The maybe.</param>
            <param name="func">The func.</param>
            <param name="select">The select.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.IMaybeExtensions.ToMaybe``1(``0)">
            <summary>
            Wraps the object in a <see cref="T:NContext.Application.Extensions.IMaybe`1"/>
            </summary>
            <typeparam name="T">The type of the object to wrap</typeparam>
            <param name="obj">The obj.</param>
            <returns><see cref="T:NContext.Application.Extensions.IMaybe`1"/></returns>
        </member>
        <member name="M:NContext.Application.Extensions.IMaybeExtensions.MaybeFirst``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a
            <see cref="T:NContext.Application.Extensions.Just`1"/>, or, if the sequence contains no elements, returns
            a <see cref="T:NContext.Application.Extensions.Nothing`1"/>.
            </summary>
            <typeparam name="T">The type of the object in the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="enumerable">The IEnumerable.</param>
            <returns><see cref="T:NContext.Application.Extensions.IMaybe`1"/></returns>
        </member>
        <member name="T:NContext.Application.Extensions.Just`1">
            <summary>
            Defines a Just implementation of <see cref="T:NContext.Application.Extensions.IMaybe`1"/>.
            </summary>
            <typeparam name="T">The type to wrap.</typeparam>
        </member>
        <member name="M:NContext.Application.Extensions.Just`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Application.Extensions.Just`1"/> class.
            </summary>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.Just`1.FromMaybe(`0)">
            <summary>
            Returns the specified default value if the <see cref="T:NContext.Application.Extensions.IMaybe`1"/> is <see cref="T:NContext.Application.Extensions.Nothing`1"/>; 
            otherwise, it returns the value contained in the <see cref="T:NContext.Application.Extensions.IMaybe`1"/>.
            </summary>
            <param name="defaultValue">The default value.</param>
            <returns>Instance of <typeparamref name="T"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Application.Extensions.Just`1.Empty">
            <summary>
            Returns a new <see cref="T:NContext.Application.Extensions.Nothing`1"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NContext.Application.Extensions.Just`1.Bind``1(System.Func{`0,NContext.Application.Extensions.IMaybe{``0}})">
            <summary>
            Returns a new <see cref="T:NContext.Application.Extensions.Nothing`1"/>.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="bindFunc">The function used to map.</param>
            <returns>Instance of <see cref="T:NContext.Application.Extensions.IMaybe`1"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Extensions.Just`1.IsJust">
            <summary>
            Gets a value indicating whether the instance is <see cref="T:NContext.Application.Extensions.Just`1"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Application.Extensions.Just`1.IsNothing">
            <summary>
            Gets a value indicating whether the instance is <see cref="T:NContext.Application.Extensions.Nothing`1"/>.
            </summary>
            <remarks></remarks>
        </member>
    </members>
</doc>
