<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NContext.Unity</name>
    </assembly>
    <members>
        <member name="T:NContext.Unity.UnityContainerFactory">
            <summary>
            Defines a simple factory for creating a <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>
            </summary>
        </member>
        <member name="M:NContext.Unity.UnityContainerFactory.Create(System.String,System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> container used for dependency injection.
            </summary>
            <param name="containerName">Name of the container.</param>
            <param name="configurationFileName">Name of the configuration file.</param>
            <param name="configurationSectionName">Name of the configuration section.</param>
            <returns>Instance of <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Unity.IUnityManager">
            <summary>
            Defines a dependency injection application component using Unity.
            </summary>
        </member>
        <member name="P:NContext.Unity.IUnityManager.Container">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.
            </summary>
        </member>
        <member name="T:NContext.Unity.UnityConfiguration">
            <summary>
            Defines a configuration class to build the application's <see cref="T:NContext.Unity.UnityManager"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Unity.UnityConfiguration.#ctor(NContext.Application.Configuration.ApplicationConfigurationBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Unity.UnityConfiguration"/> class.
            </summary>
            <param name="applicationConfigurationBuilder">The application configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Unity.UnityConfiguration.SetContainerName(System.String)">
            <summary>
            Sets the name of the container.
            </summary>
            <param name="unityContainerName">Name of the unity container.</param>
            <returns>This <see cref="T:NContext.Unity.UnityConfiguration"/> instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Unity.UnityConfiguration.SetConfigurationFileName(System.String)">
            <summary>
            Sets the name of the configuration file.
            </summary>
            <param name="unityConfigurationFileName">Name of the unity configuration file.</param>
            <returns>This <see cref="T:NContext.Unity.UnityConfiguration"/> instance.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Unity.UnityConfiguration.Setup">
            <summary>
            Sets the application's dependency injection manager using 
            the configuration created from this instance.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Unity.UnityConfiguration.ContainerName">
            <summary>
            Gets the dependency injection container adapter.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Unity.UnityConfiguration.ConfigurationFileName">
            <summary>
            Gets the name of the configuration file.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Unity.UnityManager">
            <summary>
            Implementation of <see cref="T:NContext.Unity.IUnityManager"/> interface for management of a <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.
            </summary>
        </member>
        <member name="M:NContext.Unity.UnityManager.#ctor(NContext.Unity.UnityConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NContext.Unity.UnityManager"/> class.
            </summary>
            <param name="unityConfigurationConfiguration">The dependency injection configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Unity.UnityManager.Configure(NContext.Application.Configuration.IApplicationConfiguration)">
            <summary>
            Configures the component instance.
            </summary>
            <param name="applicationConfiguration">The application configuration.</param>
            <remarks></remarks>
        </member>
        <member name="P:NContext.Unity.UnityManager.Container">
            <summary>
            Gets the unity container.
            </summary>
        </member>
        <member name="P:NContext.Unity.UnityManager.IsConfigured">
            <summary>
            Gets a value indicating whether this instance is configured.
            </summary>
            <value>
                <c>true</c> if this instance is configured; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NContext.Unity.MethodSignatureMatchingRuleFactory">
            <summary>
            Defines a simple factory class for creating a strongly-typed <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/>.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NContext.Unity.MethodSignatureMatchingRuleFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Creates a MethodSignatureMatchingRule associated with the specified <see cref="T:System.Reflection.MethodInfo"/>. 
            Use the <see cref="!:Reflect"/> or <see cref="!:Reflect&lt;TTarget&gt;"/> utility class to resolve the 
            desired method signature.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> instance.</param>
            <returns>A <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.MethodSignatureMatchingRule"/> for policy injection.</returns>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Unity.IConfigureAUnityContainer">
            <summary>
            Defines a role-interface which encapsulates logic to configure an <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/>.
            </summary>
        </member>
        <member name="M:NContext.Unity.IConfigureAUnityContainer.ConfigureContainer(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Configures the <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> dependency injection container.
            </summary>
            <param name="container">The container.</param>
            <remarks></remarks>
        </member>
        <member name="T:NContext.Unity.IRegisterWithAUnityContainer">
            <summary>
            Defines a role-interface which encapsulates logic to register with an <see cref="T:NContext.Unity.IUnityManager"/>.
            </summary>
        </member>
    </members>
</doc>
